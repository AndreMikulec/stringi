/* This file is part of the 'stringi' library.
 * 
 * Copyright 2013 Marek Gagolewski, Bartek Tartanus, Marcin Bujarski
 * 
 * 'stringi' is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 'stringi' is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with 'stringi'. If not, see <http://www.gnu.org/licenses/>.
 */
 
#include "stringi.h"



#define STRI__MAKE_CALL_METHOD(name, args) \
   {#name, (DL_FUNC)&name, args}

/**
 * List of functions available in R via .Call()
 * 
 * Form:
 * \code{\{"method_name", (DL_FUNC)pointer, number_of_args\}} - 
 * this is generated by the STRI__MAKE_CALL_METHOD macro.
 */
static const R_CallMethodDef cCallMethods[] = {
   
   STRI__MAKE_CALL_METHOD(stri_casecompare,                2),
   STRI__MAKE_CALL_METHOD(stri_casefold,                   2),
   STRI__MAKE_CALL_METHOD(stri_charcategories,             0),
   STRI__MAKE_CALL_METHOD(stri_chartype,                   1),
   STRI__MAKE_CALL_METHOD(stri_char_getcategoryid,         1),
   STRI__MAKE_CALL_METHOD(stri_char_getpropertyid,         1),
   STRI__MAKE_CALL_METHOD(stri_count_fixed,                2),
   STRI__MAKE_CALL_METHOD(stri_detect_regex,               2),
   STRI__MAKE_CALL_METHOD(stri_dup,                        2),
   STRI__MAKE_CALL_METHOD(stri_enclist,                    0),
   STRI__MAKE_CALL_METHOD(stri_encinfo,                    1),
   STRI__MAKE_CALL_METHOD(stri_encset,                     1),
   STRI__MAKE_CALL_METHOD(stri_encode,                     3),
   STRI__MAKE_CALL_METHOD(stri_enc_is_ascii,               1),
   STRI__MAKE_CALL_METHOD(stri_enc_is_utf8,                1),
   STRI__MAKE_CALL_METHOD(stri_flatten,                    2),
   STRI__MAKE_CALL_METHOD(stri_info,                       0),
   STRI__MAKE_CALL_METHOD(stri_join,                       1),
   STRI__MAKE_CALL_METHOD(stri_join2,                      2),
   STRI__MAKE_CALL_METHOD(stri_justify,                    2),
   STRI__MAKE_CALL_METHOD(stri_length,                     1),
   STRI__MAKE_CALL_METHOD(stri_localeinfo,                 1),
   STRI__MAKE_CALL_METHOD(stri_localelist,                 0),
   STRI__MAKE_CALL_METHOD(stri_localeset,                  1),
   STRI__MAKE_CALL_METHOD(stri_locate_all_class,           2),
   STRI__MAKE_CALL_METHOD(stri_locate_first_or_last_class, 3),
   STRI__MAKE_CALL_METHOD(stri_ltrim,                      1),
   STRI__MAKE_CALL_METHOD(stri_numbytes,                   1),
   STRI__MAKE_CALL_METHOD(stri_pad,                        4),
   STRI__MAKE_CALL_METHOD(stri_prepare_arg_string,         1),
   STRI__MAKE_CALL_METHOD(stri_prepare_arg_double,         1),
   STRI__MAKE_CALL_METHOD(stri_prepare_arg_integer,        1),
   STRI__MAKE_CALL_METHOD(stri_prepare_arg_logical,        1),
   STRI__MAKE_CALL_METHOD(stri_replace_all_fixed,		     3),
   STRI__MAKE_CALL_METHOD(stri_replace_first_fixed,		  3),
   STRI__MAKE_CALL_METHOD(stri_reverse,                    1),
   STRI__MAKE_CALL_METHOD(stri_rtrim,                      1),
   STRI__MAKE_CALL_METHOD(stri_split_fixed,		    	     5),
   STRI__MAKE_CALL_METHOD(stri_split_pos,  		    	     3),
   STRI__MAKE_CALL_METHOD(stri_sub,  		         	     3),
   STRI__MAKE_CALL_METHOD(stri_sub_op, 		         	  4),
   STRI__MAKE_CALL_METHOD(stri_trim,                       1),
   STRI__MAKE_CALL_METHOD(stri_trim_all,                   1),
   STRI__MAKE_CALL_METHOD(stri_unicode_normalization,      2),
   STRI__MAKE_CALL_METHOD(stri_wrap,                       4),
   STRI__MAKE_CALL_METHOD(stri_wrap_greedy,                3),
   STRI__MAKE_CALL_METHOD(stri_wrap_dynamic,               3),
   
   // the list must be NULL-terminated:
   {NULL,                           NULL,                  0}

};



/**
 * Library initialization.
 * 
 * R calls this automatically on lib load/attach.
 */
extern "C" void R_init_stringi(DllInfo *dll)
{
   R_registerRoutines(dll, NULL, cCallMethods, NULL, NULL);
   R_useDynamicSymbols(dll, Rboolean(FALSE));
   
#ifndef NDEBUG
   cerr << "DEBUG: Dynamic library 'stringi' loaded." << endl;
#endif
}




///**
// * ... not needed ...
// */
//extern "C" void  R_unload_stringi(DllInfo *info)
//{
//#ifndef NDEBUG
//   cerr << "DEBUG: Dynamic library 'stringi' unloaded." << endl;
//#endif
//}

