<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
           "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<!--
TO DO:
enc2native
enc2utf8
stri_enc_toascii
-->

<!--begin.rcode message=FALSE,echo=FALSE,error=FALSE
options(digits=7)
options(width=120)
require("knitr")
require("stringi")
require("microbenchmark")
title <- 'Character Encodings'

hook_inline <- knit_hooks$get('inline')
 knit_hooks$set(inline = function(x) {
      if (is.character(x)) highr::hi_html(x) else hook_inline(x)
    })

opts_chunk$set(
   keep.source=TRUE,
   out.width='4.5in',
   fig.width=6,
   fig.height=6/sqrt(2),
   fig.path='figures-knitr/conversion/',
   cache.path='cache-knitr/conversion/',
   cache=TRUE,
   tidy=FALSE,
   fig.align='center',
   size='small'
)
end.rcode-->
   
<head>
<title>stringi &ndash; Compatibility Tables</title>

   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<!--    <meta charset='UTF-8' /> -->
   <meta name="Author" content="Marek GÄ…golewski" />
   <meta http-equiv="Content-Language" content="en-US" />
   
   <meta name="Keywords" content="Rexamine, stringi, ICU, R" />
   <meta name="Description" content="stringi Compatibility Tables" />
   <meta name="Robots" content="index, follow" />
   
<style>
body {
   font-family: "Segoe UI";
   font-size: 14px;
}

h1 {
   font-size: 40px;
   font-weight: 500;
   background: white;
   color: black;
   padding: 5px;
   border-bottom: 3px solid black;
}

h2 {
   font-size: 25px;
   border-bottom: 1px solid gray;
   font-weight: 500;
   background: #d0d0d0;
   padding: 5px;
}

h3 {
   font-size: 20px;
   border-bottom: 1px solid #fafafa;
   font-weight: 500;
   background: #f0f0f0;
   padding: 5px;
}


h4 {
   font-size: 15px;
   font-weight: 500;
   background: #eaeaff;
   padding: 3px;
}

th {
   text-align: left;
   font-size: 10pt;
   padding: 3px;
}

table {
   border: 1px black solid;
}

td {
   border: 1px gray solid;
   padding: 3px;
}

div.columntitle {
   margin-bottom: 1ex;
   font-weight: bold;
   text-align: center;
}

div.column1, div.column2 {
   width: 30%;
   clear: none;
   border: 0;
   margin: 0;
   padding: 1ex;
   display: inline-block;
   height: auto;
   vertical-align: top;
}

div.column3 {
   width: 30%;
   clear: bottom;
   border: 0;
   margin: 0;
   padding: 1ex;
   display: inline-block;
   height: auto;
   vertical-align: top;
}
</style>
</head>

<body>



<body>
<h1><a href='http://stringi.rexamine.com'>stringi</a>
<!--rinline packageDescription("stringi")$Version -->
(<!--rinline packageDescription("stringi")$Date -->)
Compatibility Tables: <!--rinline title -->
</h1>

<!-- -------------------------------------------------------------- -->

<h2>Conversion to Raw Vectors</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
<code><!--rinline "charToRaw()" --></code> &ndash; single string to a raw vector only

<!--begin.rcode
charToRaw("aA1")
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>

<code><!--rinline "stri_encode()" --></code>
with argument <code><!--rinline "to_raw=TRUE" --></code>
   is vectorized over the first argument;
   it returns a list of raw vectors.

<!--begin.rcode
stri_encode("aA1", "", "", to_raw=TRUE)[[1]]
stri_encode(c("aA1", " "), "", "", to_raw=TRUE)
end.rcode-->

<strong>TODO:</strong> add <code><!--rinline "stri_enc_toraw()" --></code> (?)
</div>
</div>

<h3>Performance comparison</h3>

<!--begin.rcode
test1 <- "abcdefghijklmnopqrstuvwxyz"
microbenchmark(charToRaw(test1), stri_encode(test1, "", "", to_raw=TRUE)[[1]])

test2 <- rep(c("abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "0123456789"), 10)
microbenchmark(lapply(test2, charToRaw), stri_encode(test2, "", "", to_raw=TRUE))
end.rcode-->

<!-- -------------------------------------------------------------- -->

<h2>Conversion from Raw Vectors</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
<code><!--rinline "rawToChar()" --></code> 
&ndash; single raw vector to a single string only

<!--begin.rcode
rawToChar(as.raw(c(97, 65, 49)))
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_encode()" --></code>  also accepts a raw vector
   or a list of raw vectors as its first argument;
   by default, i.e. when <code><!--rinline "to_raw=FALSE" --></code>,
   the result is a character vector.

<!--begin.rcode
stri_encode(as.raw(c(97, 65, 49)), "")
stri_encode(list(as.raw(c(97, 65, 49)),
   as.raw(32)), "")
end.rcode-->


<strong>TODO:</strong> add <code><!--rinline "stri_enc_fromraw()" --></code> (?)
</div>
</div>

<h3>Performance comparison</h3>

<!--begin.rcode
test1 <- as.raw(97:122)
microbenchmark(rawToChar(test1), stri_encode(test1, ""))

test2 <- rep(list(as.raw(97:122), as.raw(65:90), as.raw(48:57)), 10)
microbenchmark(lapply(test2, rawToChar), stri_encode(test2, ""))
end.rcode-->

<!-- -------------------------------------------------------------- -->

<h2>Conversion to Integer Vectors (i.e. UTF-32)</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
   <code><!--rinline "utf8ToInt()" --></code> 
   &ndash; single string in UTF-8 to an integer vector only

<!--begin.rcode
utf8ToInt(enc2utf8("aA1"))
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_enc_toutf32()" --></code>  accepts a character vector on input
   and returns a list of integer vectors;
   like in all other functions from our package, native and UTF-8
   encodings are handled properly

<!--begin.rcode
stri_enc_toutf32("aA1")[[1]]
stri_enc_toutf32(c("aA1", " "))
end.rcode-->

</div>
</div>


<h3>Performance comparison</h3>

<!--begin.rcode
test1 <- enc2utf8("abcdefghijklmnopqrstuvwxyz")
microbenchmark(utf8ToInt(test1), stri_enc_toutf32(test1)[[1]])

test2 <- enc2utf8(rep(c("abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "0123456789"), 10))
microbenchmark(lapply(test2, utf8ToInt), stri_enc_toutf32(test2))
end.rcode-->

<!-- -------------------------------------------------------------- -->

<h2>Conversion from Integer Vectors (i.e. UTF-32)</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
   <code><!--rinline "intToUtf8()" --></code> 
   &ndash; single integer vector to a single string only

<!--begin.rcode
intToUtf8(c(97L, 65L, 49L))
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_enc_fromutf32()" --></code> 
   a single integer vector
   or a list of integer vectors as its argument;
   the result is a UTF-8-encoded character vector.

<!--begin.rcode
stri_enc_fromutf32(c(97L, 65L, 49L))
stri_enc_fromutf32(list(c(97L, 65L, 49L), 32L))
end.rcode-->

</div>
</div>


<h3>Performance comparison</h3>

<!--begin.rcode
test1 <- 97:122
microbenchmark(intToUtf8(test1), stri_enc_fromutf32(test1))

test2 <- rep(list(97:122, 65:90, 48:57), 10)
microbenchmark(lapply(test2, intToUtf8), stri_enc_fromutf32(test2))
end.rcode-->


<!-- -------------------------------------------------------------- -->

<h2>List of Supported Encodings</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
   <code><!--rinline "iconvlist()" --></code> 
   &ndash; returns a character vector with supported encoding
   names (as well as its aliases).
   
   <p>Note that, as R manual states, the names are rarely valid
   across all platforms.</p>

<!--begin.rcode
sample(iconvlist(), 4) # a sample of supported encodings
length(iconvlist()) # count; Fedora Linux 19 x64_86
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_enc_list()" --></code> 
   with argument <code><!--rinline simplified=TRUE --></code>
   provides a character vector with all supported encodings and
   their aliases in many different forms.
   
   <p>By default, howewer, a list of character vectors
   is returned. Each list element contains the list of aliases for 
   the given encoding.</p>
   
   <p>Please, note that apart from given encodings,
   ICU tries to normalize encoding specifiers, e.g. "utf8" is a valid
   specifier for "UTF-8".</p>
   
   <p>Depending on the version of the ICU library used,
   each encoding should be supported across all platforms.</p>
   
   <p>By the way, <code><!--rinline "stri_enc_info()" --></code>
   returns detailed information of a given encoding specifier.</p>

<!--begin.rcode
sample(stri_enc_list(TRUE), 4)
length(stri_enc_list(TRUE)) # includes aliases
length(stri_enc_list()) # true number of supported encodings
str(stri_enc_info("cp1250"))
end.rcode-->

</div>
</div>


<!-- -------------------------------------------------------------- -->

<h2>Convert Strings Between Encodings</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>
   <code><!--rinline "iconv()" --></code> 
   &ndash; converts a character vector between two given encodings.
   Argument <code><!--rinline "from" --></code>
   or <code><!--rinline "to" --></code> equal to ""
   denotes default (native) encoding,
   which is used by R session.

<!--begin.rcode
utf8ToInt(
   iconv(rawToChar(as.raw(c(177, 182))), "latin2", "utf-8")
)
end.rcode-->

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_encode()" --></code> 
   provides a very similar functionality
   as <code><!--rinline "iconv()" --></code>.
   
   <p>Note that currently used default encoding may be obtained by calling
   <code><!--rinline "stri_enc_get()" --></code>
   and changed any time with a call to <code><!--rinline "stri_enc_set()" --></code>.
   This is not dangerous as almost every function in stringi
   returns UTF-8-encoded strings.</p>
   
   <p><code><!--rinline "stri_encode()" --></code> and
   <code><!--rinline "iconv()" --></code> differ in the treatment of
   unsupported characters. If an incorrect code point is found on input,
   <code><!--rinline "stri_encode()" --></code>  replaces it by the default
   (for that target encoding) substitute character and generates a warning.
   <code><!--rinline "iconv()" --></code> in turn, by default silently returns
   <code>NA</code>.

<!--begin.rcode
stri_enc_toutf32(
   stri_encode(rawToChar(as.raw(c(177, 182))), "latin2", "utf-8")
)[[1]]
end.rcode-->

</div>
</div>


<h3>Performance comparison</h3>

<!--begin.rcode
test1 <- as.raw(128:255)
microbenchmark(iconv(test1, "latin2", "utf8"), stri_encode(test1, "latin2", "utf8"))
end.rcode-->


<!-- -------------------------------------------------------------- -->

<h2>Unicode Normalization</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>

<em>(none)</em>

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_enc_isnfc(), stri_enc_isnfkc(), stri_enc_isnfd(), stri_enc_isnfkd(), stri_enc_isnfkc_casefold()" --></code>
   check whether given UTF-8-encoded strings are properly normalized.
   
   <p>Moreover, <code><!--rinline "stri_enc_tonfc(), stri_enc_tonfkc(), stri_enc_tonfd(), stri_enc_tonfkd(), stri_enc_tonfkc_casefold()" --></code>
   perform the desired normalization.</p>
</div>
</div>

<!-- -------------------------------------------------------------- -->

<h2>Automatic Encoding Detection</h2>

<h3>Basic Functionality</h3>

<div class='columns'>
<div class='column1'><div class='columntitle'>base</div>

<em>(none)</em>

</div>
<div class='column2'><div class='columntitle'>stringr</div>

<em>(none)</em>

</div>
<div class='column3'><div class='columntitle'>stringi</div>
   <code><!--rinline "stri_enc_detect()" --></code>
   and <code><!--rinline "stri_enc_detect2()" --></code>
   provide two experimental facilities for automatic encoding detection.
   The first one uses ICU's native algorithm and the second one
   provides our own implementation for locale-dependent guessing.
   
   <p>Moreover, the functions
   <code><!--rinline "stri_enc_isascii(), stri_enc_utf8(), str_enci_isutf16le(), stri_enc_isutf16le(), stri_enc_isutf32le(), stri_enc_isutf32le()" --></code>
   check whether given byte sequences
   form a valid character sequence in a given encoding.</p>
</div>
</div>


<!-- -------------------------------------------------------------- -->

<div>
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/">
<img alt="Creative Commons License" style="border-width:0; float: left; margin: 8px" src="http://i.creativecommons.org/l/by/3.0/88x31.png"></a>
<a href='http://www.rexamine.com/'><img style='float: right; margin: 8px' src='http://static.rexamine.com/img/Rexamine_logo_transparent3.png' alt='Rexamine' /></a>

<div style='text-align: center'>Licensed under the <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.<br />
Copyleft 2013, <a href='http://gagolewski.rexamine.com'>Marek Gagolewski</a></div>


</div>

</body>
</html>
